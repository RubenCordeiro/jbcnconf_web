{
  "items": [
    {
      "id": "5e1f8b2cb84b1a0cd6b9fabb",
      "title": "Unit Testing like a Pro",
      "abstract": "\"I think everyone is born creative, but it can be suppressed by fear\" - Evan Spiegel\nFocusing on the creative work without being afraid of breaking the existing behavior can make software development very addictive! Good automated tests can buy you that!\n\nHowever, unmaintainable tests will slow you down and cause you painful headaches, compilation errors and random failures. To avoid that, your unit tests should be significant, expressive, few, and blazing fast - writing good tests thus becomes the toughest challenge for any developer, no matter how experienced. For every test that you write you have to balance risk with maintenance costs, while also looking out for test design smells that may point out needed refactorings, sometimes unexpected or risky. Testing can give you one of the most valuable feedback about your micro-design you will ever receive. You only have to listen. Because in the end, a good, clean design is what matters, not the coverage%.\n\nGrab a strong coffee and join this extract from Victor’s Unit Testing #training, to learn about: testing priorities,  buggy tests, mutation testing, fixture-based test breakdown, \"purifying\" your logic, partial mock smell and key tips for testing Legacy Code. All via an entertaining, dynamic session you will never forget.",
      "type": "talk",
      "tags": [
        "Java",
        "Unit Testing",
        "Design",
        "Clean Code"
      ],
      "level": "middle",
      "speakers": [
        "d27efdbbf9293c1d2cbcb35559c2558a0707a484"
      ]
    },
    {
      "id": "5e1f8b4db84b1a0cd6b9fabc",
      "title": "Battle of the Microservice Frameworks - Micronaut versus Quarkus edition!",
      "abstract": "Micronaut and Quarkus are two cool emerging Java backend frameworks that aim to solve some problems that exist in current frameworks, like faster startup, low memory footprint, and support for ahead-of-time compilation using GraalVM. In this session, we'll square off both frameworks against each other.\n\nHow do they compare, what are the stronger and weaker points of both frameworks?\n\nWe'll compare the following features:\n\nInitializing your project\nBuilding your first restcontroller / programming model\nStartup time\nDatabase support\nIntegration test support\nBuilding native images\nMemory usage and JAR sizes\nEase of cloud deployment\nIn the end, we might have a clear winner! ... or will we?\n\n",
      "type": "talk",
      "tags": [
        "java",
        " quarkus",
        " micronaut",
        " comparison"
      ],
      "level": "beginner",
      "speakers": [
        "40afe10a3ea9ec161d15ade201a0101fa8f635f4"
      ]
    },
    {
      "id": "5e1f8bf1b84b1a0cd6b9fabd",
      "title": "Change Data Streaming For Microservices With Apache Kafka & Debezium",
      "abstract": "Debezium (noun | de·be·zi·um | /dɪ:ˈbɪ:ziːəm/) - Secret Sauce for Change Data Capture\n\nApache Kafka is a highly popular option for asynchronous event propagation between microservices. Things get challenging though when adding a service’s database to the picture: How can you avoid inconsistencies between Kafka and the database?\n\nEnter change data capture (CDC) and Debezium. By capturing changes from the log files of the database, Debezium gives you both reliable and consistent inter-service messaging via Kafka and instant read-your-own-write semantics for services themselves.\n\nIn this session you’ll see how to leverage CDC for reliable microservices integration, e.g. using the outbox pattern, as well as many other CDC applications, such as maintaining audit logs, automatically keeping your full-text search index in sync, and driving streaming queries. We’ll also discuss practical matters, e.g. HA set-ups, best practices for running Debezium in production on and off Kubernetes, and the many use cases enabled by Kafka Connect's single message transformations.",
      "type": "talk",
      "tags": [
        "Data Streaming",
        " Apache Kafka",
        " Change Data Capture"
      ],
      "level": "middle",
      "speakers": [
        "8c386f2e1f0875844aab547ee40fa1772173d59e"
      ]
    },
    {
      "id": "5e1f914eb84b1a0cd6b9fabe",
      "title": "Reacting to an Event-Driven World",
      "abstract": "We now live in a world with data at its heart. The amount of data being produced every day is growing exponentially and a large amount of this data is in the form of events. Whether it be updates from sensors, clicks on a website or even tweets, applications are bombarded with a never-ending stream of new events. So, how can we architect our applications to be more reactive and resilient to these fluctuating loads and better manage our thirst for data? In this session explore how Kafka and Reactive application architecture can be combined in applications to better handle our modern data needs.\n",
      "type": "talk",
      "tags": [
        "Kafka",
        " Reactive Architecture",
        " Vert.x"
      ],
      "level": "beginner",
      "speakers": [
        "b21e540e924111f0e9d271ed82350fa020b9972e"
      ]
    },
    {
      "id": "5e1f91dcb84b1a0cd6b9fabf",
      "title": "Reactive Programming for Real Use Cases",
      "abstract": "Probably you are curious about this thing called Reactive Programming. Reactive Programming is another programming paradigm that in most of the cases, we are not used to coding in our day-to-day work, as the imperative way is the common one. This makes learning and thinking in a reactive way harder. One of the main problems I have found when learning and reading material about Reactive Programming is that they never tackle enterprise use cases. In this session, we are going to skip the cute ideas that are normally part of a reactive programming talk and focus on how to use it in the real world. Don't be the last developer to board this train and move your reactive skills from novice to expert.\n",
      "type": "talk",
      "tags": [
        "java",
        " reactive"
      ],
      "level": "middle",
      "speakers": [
        "1cf43210c8515585e52e4d2f6f2e5e0f582049d8"
      ]
    },
    {
      "id": "5e28cb18b67d590cd5b81271",
      "title": "Refactoring into State Design Pattern",
      "abstract": "State Design pattern seems to be well know in theory of software development. But how often is it used? When we realize it is needed, we might be already drowning within sets of nested if-else statements or switches… On the other side usually we do not know that we are going to need it at some point and want to avoid over-engineering at the beginning...\n\nDuring the workshop I will take you into a journey of refactoring from sets of if-else statements into State Design Pattern. We will be supported by Pyramid of Refactoring concept. We are going to meet a few other design patterns on the way as well, like Null Object and probably more. \n\nDo not forget to bring your laptop with IntelliJ installed and Java 8+. \n",
      "type": "workshop",
      "tags": [
        "refactoring",
        " design patterns",
        " java"
      ],
      "level": "middle",
      "speakers": [
        "34e64a4d88094a0c4231d49cc0305d61d7b854ee"
      ]
    },
    {
      "id": "5e28cb6bb67d590cd5b81272",
      "title": "What Every Java Developer Needs To Know About Java Flight Recorder",
      "abstract": "Java Flight Recorder (JFR) is a mature and stable profiling and monitoring technology. Its long history dates back to BEA JRockit, and it was integrated with HotSpot over 10 years ago! However, for most of that time, it was a proprietary Oracle technology and so many developers are unfamiliar with it.\n\nIn this workshop, we will explore how to start up Flight Recorder and use Java Mission Control to look at the files it creates. We will see, hands-on, how many of the tasks that developers typically use JProfiler or YourKit for can be replaced with the open-source JFR / JMC combo instead.\n\nIn the second half, we will dig deeper into Flight Recorder and explore its programmatic APIs, and how to use JFR without needing a GUI - just by writing simple Java code. You'll have the opportunity to read and extract data from your own JFR files. To conclude with, we'll meet the brand new Java 14 features that extend Flight Recorder even further, and see the power that this unleashes for the next generation of monitoring and observing JVM apps.",
      "type": "workshop",
      "tags": [
        "Observability",
        " Java 14",
        " Monitoring"
      ],
      "level": "beginner",
      "speakers": [
        "43465d1832e6ad88035b44bfc924e958aca86aa9"
      ]
    },
    {
      "id": "5e28cd68b67d590cd5b81275",
      "title": "The HOW series: Testing and documenting  REST ",
      "abstract": "Every developer has a set of favorite tools and there are several reason to why. Join me for the list of key features, code examples, a little bit of theory and plenty of  “lessons learned“ on some of my favorite tools : RestAssured, WireMock, Spock, OpenAPI, Swagger and TestContainers.",
      "type": "talk",
      "tags": [
        "REST",
        " REST API",
        " Development Tools",
        " Documentation"
      ],
      "level": "beginner",
      "speakers": [
        "41ceb1cd66f7ae889863eaae4906e011474440cc"
      ]
    },
    {
      "id": "5e28cde8b67d590cd5b81276",
      "title": "Event-Driven REST APIs",
      "abstract": "When should you use request-response and when should you use messaging instead? What if you could use REST for everything, including Event-Driven Architectures?\n\nLearn how to design REST APIs that support both conventional human user interfaces and services, and those that support Event-Driven, and more generally, Message-Driven Architectures. As a bonus, expect to pick up tips on Reactive programming. This session is about REST API design for request-response and event-driven microservices with Domain Events using Event Sourcing and CQRS.",
      "type": "talk",
      "tags": [
        "REST",
        "Event-Driven",
        "Reactive"
      ],
      "level": "middle",
      "speakers": [
        "c9f19a5a2dbbfed36664ef31c4ee86c0dfbbe388"
      ]
    },
    {
      "id": "5e3b3b99a8bd710c4fe7295b",
      "title": "10 Java Security Practices They Didn't Teach You In School",
      "abstract": "Software security breaches are rising to an alarming rate. As a Java developer, you should be aware of how important security in your applications is. In this session, we will provide you with the top 10 security best practices for Java developers. Reviewing the OWASP top 10 and how this augments Java development for better security. By showing the actual problems and how you can protect yourself during your daily Java development, you will have a better understanding of why and how security focus is essential.",
      "type": "talk",
      "tags": [
        "Java",
        " Security",
        " Best practices "
      ],
      "level": "middle",
      "speakers": [
        "a4529dc3081fc5242a51aecadc114b5ff5aa1520"
      ]
    },
    {
      "id": "5e3b3c62a8bd710c4fe7295c",
      "title": "Evolve to Reactive; A performance history",
      "abstract": "In this session, attendees will learn about a real-world evolution to a reactive way; we will show how we migrate a huge EAR Core Banking Application  covering tips and tricks of an experience of an evolution the Application and how we evolve to a modern reactive modules; tips, tricks, pros, cons and the reasons for being involved on move forward and present sample code and explain the security concerns on this evolution. We will be using snippets code based on JAVA, JWT, JWS, Auth0, Spring Boot, Reactor and Webflux deployed on Oracle Cloud.\n",
      "type": "talk",
      "tags": [
        "reactive",
        " java",
        " performance"
      ],
      "level": "middle",
      "speakers": [
        "4f72f63b37fb9bb3781b7e7b1e3246b1364c02a2"
      ]
    },
    {
      "id": "5e3b3ccda8bd710c4fe7295d",
      "title": "The journey from Imperative to Reactive",
      "abstract": "You have been developing imperative microservices for a while. You then tried hard to make them to be asynchronous. Lately, you've heard about people talking about reactive. You are now wondering why you should care about reactive. You'd like to find out more about reactive: Why should I care? What I can do to make my microservice reactive, non-blocking? Should I consider using Reactive Streams? Come to this session to find out what reactive means. It explains reactive programming and then Reactive eXtensions, Reactive Streams, followed by a demo of using MicroProfile Reactive Streams Operators, and MicroProfile Reactive Messaging to create a truly reactive microservice and integrate with Kafka.",
      "type": "talk",
      "tags": [
        "Cloud Native",
        " Microservices",
        " MicroProfile",
        " reactive",
        " imperative"
      ],
      "level": "beginner",
      "speakers": [
        "287733a35b40f9c6050e1cfda90e39e611323e91"
      ]
    },
    {
      "id": "5e56f7be93dc4008d5c9d1c0",
      "title": "Real Time Streaming Analytics with 100000 Connected Cars using MQTT, Kafka, Kubernetes and TensorFlow",
      "abstract": "This session discusses uses cases leveraging Apache Kafka open source ecosystem as streaming platform to process IoT data. See architectural alternatives and a live demo of how devices connect to Kafka via MQTT. Learn how to analyze the IoT data either natively on Kafka with Kafka Streams / KSQL, or on an external big data cluster like Spark, Flink or Elastic leveraging Kafka Connect, and how to leverage TensorFlow for Machine Learning. A live demo shows how to build a cloud native IoT infrastructure on Kubernetes to connect and process streaming data in real time from 100000 cars to do predictive maintenance at scale in real time.",
      "type": "talk",
      "tags": [
        "kafka",
        "mqtt",
        "kubernetes",
        "IoT"
      ],
      "level": "beginner",
      "speakers": [
        "4933ebef38f82b62da601eb07e8362bb389cc560"
      ]
    },
    {
      "id": "5e56f7d793dc4008d5c9d1c1",
      "title": "Keeping Safe Your Server to Server Communications",
      "abstract": "The rise of microservices has reached an impressive point of maturity. We have all traveled a very interesting way to learn about new tools, frameworks, design patterns and strategies that have forced us to think out of the box to embrace this architecture. One of the challenges is choosing how our microservices will communicate? choreography or orchestration. Another of the challenges is to reduce the risk between those communication adding a security layer.\n\nWe are facing scenarios such as communications between two microservices in the same trust domain of between two or multiple trust domains. How to ensure that a microservices has access to another? We also can have communications between synchronously or asynchronously microservices, for the first ones the communication is given over HTTP, but the seconds the communication can be given over any kind of messaging system.\n\nIn this talk, we will cover some points to solve those challenges. Starting with the authentication and authorization in server-to-server communications, propagating identity information between microservices and handling communications between different trust domains. Then we will discuss how to secure synchronous communications with certificates, JWTs or over gRPC. Finally, we will talk about messaging systems such as RabbitMQ, Kafka, ActiveMQ for secure asynchronous communications.",
      "type": "talk",
      "tags": [
        "Java",
        " Microservices",
        " Microservices Architecture",
        " Identity",
        " Authentication",
        " Authorization",
        " JWTs",
        " Communication Complexity",
        " gRPC",
        " Event-Driven Microservices",
        " API Gateway"
      ],
      "level": "advanced",
      "speakers": [
        "636abf491a53384c8f8187db2bb85e81e29e0982"
      ]
    },
    {
      "id": "5e56f82493dc4008d5c9d1c2",
      "title": "Designing Microservices in Functional Style",
      "abstract": "Event sourcing, CQRS, Microservices, they are all concepts that share a natural affinity with the fundamental idea of functional programming: defining complex behavior through the combination of elementary transformations.\nThe real surprise is how well they work together. Not only we can build a very powerful and scalable application, but it is even simpler to build than the traditional Object-Oriented approach. I will present what we learned from our experience: our problems and how we solved them.\nAt the end of this talk, you will know the basic rules to architect a system using functional programming principles for microservices with CQRS and Event Source without using any framework. We will discuss what are the benefits of this approach and the dangers and difficulties that it is better to avoid.",
      "type": "talk",
      "tags": [
        "Kotlin",
        " Event Sourcing",
        " Microservices",
        " Functional Programming"
      ],
      "level": "middle",
      "speakers": [
        "30ad77f3c637602914465cad22c7445a992104cd"
      ]
    },
    {
      "id": "5e56fa4493dc4008d5c9d1c4",
      "title": "Troubleshooting containerized applications",
      "abstract": "Your application is living now in a container, yet is its private life a happy one?\n\nFind out that before your users do! If your application is not feeling so well, perhaps dealing with issues should be an inner container/Kubernetes affair while trying not to affect the availability of your software piece.\n\nIn this session will detail some implementation techniques for troubleshooting and debugging containerized applications in order to address some common problems like: permission issues, invalid parameters, volume mount errors, obsolete images, accessing running containers inside pods etc.",
      "type": "talk",
      "tags": [
        "kubernetes",
        " cloud",
        " docker",
        " fixit",
        " lessonslearned"
      ],
      "level": "beginner",
      "speakers": [
        "c93a48ea7c1d8a91f60be490b32b9357f77d8212"
      ]
    },
    {
      "id": "5e56fa5293dc4008d5c9d1c5",
      "title": "Purely Dysfunctional Data Structures for Java",
      "abstract": "The design of performant immutable data structures is a challenge that was accepted by Chris Okasaki over 20 years ago. \n\nWe all know and appreciate the benefits and simplicity of immutability, but does it indeed make everything simpler?\n\nIn this talk, we'll challenge the omni-applicability of immutability, explore what the concept of Persistent Data Structures is, how most common implementations look like, and why it makes things way more complicated that one might think.\n\nWe'll see how much blood, sweat, and tears are required to make the experience of working with immutable data structures at least remotely efficient.",
      "type": "talk",
      "tags": [
        "Java",
        " Functional Programming",
        " Data Structures"
      ],
      "level": "middle",
      "speakers": [
        "dcf4d5f83bc2dab51fb90922055352668da14a18"
      ]
    },
    {
      "id": "5e56f6ef93dc4008d5c9d1be",
      "title": "Deploying a Kubernetes-native Data Streaming Pipeline with Strimzi and Debezium",
      "abstract": "In  this workshop, you’ll learn the practical aspects of deploying, operating and interacting data streaming pipeline with Apache Kafka on Kubernetes thanks to Strimzi and Debezium. You will learn: \n* How to manage Apache Kafka clusters, topics, and users on Kubernetes using the Strimzi operators and custom resources (CRDs) \n* How to self-service your Kafka clusters, topics, and users by monitoring specific projects; \n* How to interact with your Kafka cluster from both within and outside the Kubernetes instance, using Apache Camel; \n* How to handle cluster and clients TLS certificates for encryption and authentication. \n* Use of Change Data Capture (CDC) in the context of data streaming\n* Configure Debezium for data ingestion to Apache Kafka\n* Deploy microservices for data streaming based on Kafka Streams and Quarkus",
      "type": "workshop",
      "tags": [
        "Apache Kafka",
        "Kubernetes",
        "CDC",
        "debezium",
        "strimzi"
      ],
      "level": "middle",
      "speakers": [
        "e274414e5eaa7d3cb0705bd1488291ccf5ccdec5",
        "8c386f2e1f0875844aab547ee40fa1772173d59e"
      ]
    },
    {
      "id": "5e56f74a93dc4008d5c9d1bf",
      "title": "From (Java) Monoliths to K8s",
      "abstract": "Migrating your existing architecture from a monolith to microservices is a challenging task. Not only is the technology landscape different and overwhelming, but you also need a solid plan to bring the rest of the team along in the journey. \nHow do you come up with such a plan?\nThis session covers the lessons learned from migrating a monolithic open-source project to microservices using Jenkins X. You’ll learn common patterns, tweaks, and best practices that you can adopt to make the best of tools such as Jenkins X, Helm, Zeebe, and Kubernetes. The talk focuses on real-life examples and shows you how these tools can be used to speed your development practices and train high performing teams.\n",
      "type": "talk",
      "tags": [
        "kubernetes",
        " cloudnative",
        " journey",
        " tools",
        " challenges",
        " patterns "
      ],
      "level": "advanced",
      "speakers": [
        "4b26a098aafaf6bc3d533389b61d3ef5ab01f5a3"
      ]
    },
    {
      "id": "5e56fa3293dc4008d5c9d1c3",
      "title": "How to Choose a JDK",
      "abstract": "Choosing which Java runtime to deploy used to be simple: for most people, it was the de facto default Oracle JDK.  For those with more demanding performance requirements, the options were Zing from Azul or possibly J9 from IBM.\n\nToday, things are very different. The license for the Oracle JDK changed with the release of JDK 11, meaning to use it in production requires a paid Java SE subscription.  To address the needs of Java developers, there are now a number of choices for the Java runtime, all in some way based on the OpenJDK source code.\n\nHow do you decide what distribution is right for your situation?",
      "type": "talk",
      "tags": [
        "OpenJDK",
        " JDK",
        " Java"
      ],
      "level": "middle",
      "speakers": [
        "a1eda7b31c4fa43f4097d55e9687a876dc194f4b"
      ]
    },
    {
      "id": "5e56fa6693dc4008d5c9d1c6",
      "title": "Java After Eight",
      "abstract": "Many projects are still on Java 8 and yet, Java 14 is already out! The small releases after 9 created the illusion of nothing much happening, but nothing could be further from the truth - a lot changes since then that shapes the look of everyday Java code:\n\n* new language features like switch expressions, `var`, and text blocks\n* new APIs like stack walking and the reactive HTTP/2 client\n* additions to existing APIs, like `Stream` and `Optional`\n\nIn this talk, we'll take a simple Java 8 code base, update it to 14, and refactor it to use the new language features and APIs. You'll be surprised how much the code changes!\n",
      "type": "talk",
      "tags": [
        "JavaNext",
        " Java14"
      ],
      "level": "middle",
      "speakers": [
        "4c4752c0d767ef218ef980dfd1ab90ac6c1571d9"
      ]
    }
  ]
}